package git

import (
	"strings"
	"testing"
)

func TestIsGenerated(t *testing.T) {
	detector := NewGeneratedFileDetector()

	tests := []struct {
		path     string
		expected bool
	}{
		// Path patterns
		{"node_modules/package/index.js", true},
		{"vendor/dependency.js", true},
		{"third_party/lib.js", true},
		{"deps/utils.js", true},
		{"docs/api.md", true},
		{"documentation/usage.md", true},
		{"Pods/AFNetworking/README.md", true},
		{"MyProject.xcodeproj/project.pbxproj", true},
		{"UI.xcassets/image.png", true},
		{"MyFramework.framework/Info.plist", true},
		{".swiftpm/config", true},
		{".idea/workspace.xml", true},
		{"python-package.egg-info/PKG-INFO", true},
		{"__generated__/types.ts", true},
		{"Unity/ProjectSettings/EditorSettings.asset", true},

		// Filename patterns
		{"app.min.js", true},
		{"app-min.js", true},
		{"app.bundle.js", true},
		{"jquery-3.6.0.min.js", true},
		{"d3.js", true},
		{"react.js", true},
		{"bootstrap.css", true},
		{"normalize.css", true},
		{"semantic-ui.css", true},
		{"gl-matrix.js", true},
		{"webpack-runtime.js", true},
		{"model.auto.cs", true},
		{"form.designer.cs", true},
		{"output.generated.h", true},
		{"api.bundle.js", true},
		{"utils.vendor.js", true},
		{"style.compiled.css", true},

		// File extensions
		{"message.pb.go", true},
		{"schema.pb.cc", true},
		{"types.pb.h", true},
		{"model.g.cs", true},
		{"parser.g.h", true},
		{"service.g.java", true},
		{"client.gen.go", true},
		{"viewmodel.gen.cs", true},
		{"bundle.gen.js", true},
		{"types.gen.ts", true},
		{"form.generated.cs", true},
		{"api.generated.h", true},
		{"widget.g.dart", true},
		{"controller.g.m", true},
		{"view.g.swift", true},
		{"scene.meta", true},
		{"interface.nib", true},
		{"workspace.xcworkspacedata", true},
		{"project.xcuserstate", true},
		{"window.moc", true},
		{"model.obj", true},
		{"types.rbi", true},
		{"template.ipp", true},
		{"interfaces.d.ts", true},
		{"build.timestamp", true},

		// Lock files
		{"yarn.lock", true},
		{"package-lock.json", true},
		{"composer.lock", true},
		{"Cargo.lock", true},
		{"poetry.lock", true},
		{"Gopkg.lock", true},
		{"go.sum", true},
		{"Gemfile.lock", true},
		{"packages.lock.json", true},
		{".terraform.lock.hcl", true},
		{"deno.lock", true},
		{"pnpm-lock.yaml", true},
		{"flake.lock", true},

		// Android generated files
		{"AndroidManifest.xml", true},
		{"R.java", true},
		{"BuildConfig.java", true},
		{"LoginFragment.java", true},
		{"MainActivity.java", true},

		// Regular files
		{"src/main.go", false},
		{"app.js", false},
		{"style.css", false},
		{"README.md", false},
		{"main.rs", false},
		{"index.jsx", false},
		{"components/Button.tsx", false},
		{"project.conf", false},
		{"test/helper.py", false},
	}

	for _, tt := range tests {
		t.Run(tt.path, func(t *testing.T) {
			result := detector.IsGenerated(tt.path)
			if result != tt.expected {
				t.Errorf("IsGenerated(%q) = %v, want %v", tt.path, result, tt.expected)
			}
		})
	}
}

// TestFilterGeneratedDiff tests that diffs for generated files are filtered out
func TestFilterGeneratedDiff(t *testing.T) {
	tests := []struct {
		name     string
		diff     string
		expected string
	}{
		{
			name:     "Empty diff",
			diff:     "",
			expected: "",
		},
		{
			name:     "No file diff",
			diff:     "Some header info",
			expected: "Some header info",
		},
		{
			name: "Single non-generated file",
			diff: `Some header info
diff --git a/src/main.go b/src/main.go
index 1234567..abcdef0 100644
--- a/src/main.go
+++ b/src/main.go
@@ -1,5 +1,5 @@
 package main
-func main() {
+func main() { // Updated
 	fmt.Println("Hello")
 }`,
			expected: `Some header info
diff --git a/src/main.go b/src/main.go
index 1234567..abcdef0 100644
--- a/src/main.go
+++ b/src/main.go
@@ -1,5 +1,5 @@
 package main
-func main() {
+func main() { // Updated
 	fmt.Println("Hello")
 }`,
		},
		{
			name: "Single generated file - go.sum",
			diff: `Some header info
diff --git a/go.sum b/go.sum
index 1234567..abcdef0 100644
--- a/go.sum
+++ b/go.sum
@@ -1,5 +1,5 @@
 module example.com
-require github.com/pkg/errors v0.9.0
+require github.com/pkg/errors v0.9.1
 go 1.16`,
			expected: `Some header info`,
		},
		{
			name: "Single generated file - lock file",
			diff: `Some header info
diff --git a/yarn.lock b/yarn.lock
index 1234567..abcdef0 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1,5 +1,5 @@
 # THIS IS AN AUTOGENERATED FILE

-lodash@^4.17.20:
-  version "4.17.20"
+lodash@^4.17.21:
   version "4.17.21"`,
			expected: `Some header info`,
		},
		{
			name: "Single generated file - minified",
			diff: `Some header info
diff --git a/dist/app.min.js b/dist/app.min.js
index 1234567..abcdef0 100644
--- a/dist/app.min.js
+++ b/dist/app.min.js
@@ -1,3 +1,3 @@
-!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).App=t()}(this,function(){return function(){}});
-//# sourceMappingURL=app.min.js.map
+!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).App=t()}(this,function(){return function(){console.log("updated")}});
+//# sourceMappingURL=app.min.js.map`,
			expected: `Some header info`,
		},
		{
			name: "Mixed files",
			diff: `Some header info
diff --git a/go.sum b/go.sum
index 1234567..abcdef0 100644
--- a/go.sum
+++ b/go.sum
@@ -1,5 +1,5 @@
 module example.com
-require github.com/pkg/errors v0.9.0
+require github.com/pkg/errors v0.9.1
 go 1.16
diff --git a/src/main.go b/src/main.go
index 1234567..abcdef0 100644
--- a/src/main.go
+++ b/src/main.go
@@ -1,5 +1,5 @@
 package main
-func main() {
+func main() { // Updated
 	fmt.Println("Hello")
 }`,
			expected: `Some header info
diff --git a/src/main.go b/src/main.go
index 1234567..abcdef0 100644
--- a/src/main.go
+++ b/src/main.go
@@ -1,5 +1,5 @@
 package main
-func main() {
+func main() { // Updated
 	fmt.Println("Hello")
 }`,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := FilterGeneratedDiff(tt.diff)

			// Normalize line endings and trim spaces for comparison
			result = strings.TrimSpace(strings.ReplaceAll(result, "\r\n", "\n"))
			expected := strings.TrimSpace(strings.ReplaceAll(tt.expected, "\r\n", "\n"))

			if result != expected {
				t.Errorf("FilterGeneratedDiff() = %q, want %q", result, expected)
			}
		})
	}
}
